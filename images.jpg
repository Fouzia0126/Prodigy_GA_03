# -*- coding: utf-8 -*-
"""nst.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tLgI86YaYen9JosXtrgK96AiKxyTUBJP
"""

#@title Neural Style Transfer with PyTorch

# Install dependencies (only needed in Colab)
!pip install torch torchvision pillow matplotlib --quiet

import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import transforms, models
from PIL import Image, UnidentifiedImageError
import matplotlib.pyplot as plt
import requests
from io import BytesIO

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

def load_image_from_url(url, max_size=400, shape=None):
    try:
        response = requests.get(url)
        response.raise_for_status()  # Raise an exception for bad status codes (4xx or 5xx)
        image_data = BytesIO(response.content)
        image = Image.open(image_data).convert('RGB')
        size = max_size if max(image.size) > max_size else max(image.size)
        if shape is not None:
            size = shape
        in_transform = transforms.Compose([
            transforms.Resize((size, size)),
            transforms.ToTensor(),
            transforms.Normalize((0.485, 0.456, 0.406),
                                 (0.229, 0.224, 0.225))])
        image = in_transform(image).unsqueeze(0)
        return image.to(device)
    except requests.exceptions.RequestException as e:
        print(f"Error fetching image from URL: {e}")
        return None
    except UnidentifiedImageError:
        print(f"Error: Could not identify image file from URL: {url}")
        return None
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
        return None


def imshow(tensor, title=None):
    image = tensor.to("cpu").clone().detach()
    image = image.squeeze(0)
    image = transforms.ToPILImage()(image)
    plt.imshow(image)
    if title:
        plt.title(title)
    plt.axis('off')
    plt.show()

def get_features(image, model, layers=None):
    if layers is None:
        layers = {
            '0': 'conv1_1',
            '5': 'conv2_1',
            '10': 'conv3_1',
            '19': 'conv4_1',
            '21': 'conv4_2',
            '28': 'conv5_1'
        }
    features = {}
    x = image
    for name, layer in model._modules.items():
        x = layer(x)
        if name in layers:
            features[layers[name]] = x
    return features

def gram_matrix(tensor):
    b, c, h, w = tensor.size()
    tensor = tensor.view(c, h * w)
    gram = torch.mm(tensor, tensor.t())
    return gram

# URLs for images
content_url = "https://www.google.com/url?sa=i&url=https%3A%2F%2Fpetsworld.in%2Fblogs%2Fnews%2Ffamous-labradors-retriever-dog-breeds-in-india%3Fsrsltid%3DAfmBOopbYxQQQUFEVlZrBf-ceo7s0X2NoQ-g1EGxqf8bjTfYkaDqA5IS&psig=AOvVaw1GnNpchr_2NNXg3WQP8zSv&ust=1754747597810000&source=images&cd=vfe&opi=89978449&ved=0CBUQjRxqFwoTCJCo96uu-44DFQAAAAAdAAAAABAE"
style_url = "https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.artfactory.in%2Fproduct%2F3021%2FThe-Starry-Night%3Fsrsltid%3DAfmBOoq7_smANgkLQgUm2Yf5eDq3ZomI2wCf-ThjBnvYMWkNhybpDAKs&psig=AOvVaw0EAmh9M6JlYF9oSKTYjh_s&ust=1754747634867000&source=images&cd=vfe&opi=89978449&ved=0CBUQjRxqFwoTCKjR-8Cu-44DFQAAAAAdAAAAABAE"

content = load_image_from_url(content_url)
style = load_image_from_url(style_url, shape=content.shape[-2:])

if content is not None and style is not None:
    vgg = models.vgg19(pretrained=True).features.to(device).eval()
    for param in vgg.parameters():
        param.requires_grad = False

    content_features = get_features(content, vgg)
    style_features = get_features(style, vgg)
    style_grams = {layer: gram_matrix(style_features[layer]) for layer in style_features}

    target = content.clone().requires_grad_(True).to(device)

    style_weights = {
        'conv1_1': 1.0,
        'conv2_1': 0.75,
        'conv3_1': 0.5,
        'conv4_1': 0.25,
        'conv5_1': 0.1
    }

    content_weight = 1e4
    style_weight = 1e2
    optimizer = optim.Adam([target], lr=0.003)

    epochs = 300

    print("Starting style transfer... This may take a few minutes.")
    for i in range(1, epochs + 1):
        target_features = get_features(target, vgg)
        content_loss = torch.mean((target_features['conv4_2'] - content_features['conv4_2']) ** 2)
        style_loss = 0
        for layer in style_weights:
            target_feature = target_features[layer]
            target_gram = gram_matrix(target_feature)
            style_gram = style_grams[layer]
            layer_style_loss = style_weights[layer] * torch.mean((target_gram - style_gram) ** 2)
            _, d, h, w = target_feature.shape
            style_loss += layer_style_loss / (d * h * w)
        total_loss = content_weight * content_loss + style_weight * style_loss
        optimizer.zero_grad()
        total_loss.backward()
        optimizer.step()
        if i % 50 == 0:
            print(f"Epoch {i}, Loss: {total_loss.item():.4f}")

    print("Style transfer complete.")

    imshow(content, title="Content Image")
    imshow(style, title="Style Image")
    imshow(target, title="Output Image")

    # Save output image
    output_image = target.to("cpu").clone().detach().squeeze(0)
    output_image = transforms.ToPILImage()(output_image)
    output_image.save("output_stylized.jpg")
    print("Output image saved as output_stylized.jpg")
else:
    print("Skipping style transfer due to image loading errors.")
